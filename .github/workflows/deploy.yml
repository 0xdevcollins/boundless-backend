name: üöÄ Deploy Boundless Backend API

# Required GitHub Secrets:
# DEPLOY_SERVER - Your server IP address (e.g., 46.202.195.31)
# DEPLOY_USERNAME - SFTP username (e.g., atlaswealthltd-www-api)
# DEPLOY_PASSWORD - SFTP password
# DEPLOY_REMOTE_PATH - Remote deployment path (e.g., /home/atlaswealthltd-www-api/htdocs/www.api.atlaswealthltd.org)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: üéâ Deploy Node.js API
    runs-on: ubuntu-latest

    steps:
      - name: üöö Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: üì• Install dependencies
        run: npm ci

      - name: üî® Build TypeScript
        run: npm run build


      # - name: üîç Lint code
      #   run: npm run lint

      - name: üìÇ Prepare deployment files
        run: |
          # Create deployment directory
          mkdir -p deployment
          
          # Copy only essential compiled files
          cp -r dist/ deployment/
          
          # Create minimal production package.json (only runtime dependencies)
          node -e "
            const pkg = require('./package.json');
            const productionDeps = {};
            
            // Only include production dependencies
            Object.keys(pkg.dependencies || {}).forEach(dep => {
              productionDeps[dep] = pkg.dependencies[dep];
            });
            
            const prodPkg = {
              name: pkg.name,
              version: pkg.version,
              description: pkg.description,
              main: pkg.main,
              scripts: {
                start: pkg.scripts.start
              },
              dependencies: productionDeps,
              engines: pkg.engines || {}
            };
            
            require('fs').writeFileSync('./deployment/package.json', JSON.stringify(prodPkg, null, 2));
          "
          
          # Copy environment template if exists
          if [ -f .env.example ]; then
            cp .env.example deployment/
          fi
          
          # Copy PM2 config if exists
          if [ -f ecosystem.config.js ]; then
            cp ecosystem.config.js deployment/
          fi
          
          # Install only production dependencies (no dev dependencies)
          cd deployment
          npm install --production --no-optional --no-audit --no-fund
          cd ..
          
          # Remove unnecessary files to reduce upload size
          cd deployment
          rm -rf node_modules/.cache
          rm -rf node_modules/*/test
          rm -rf node_modules/*/tests
          rm -rf node_modules/*/docs
          rm -rf node_modules/*/doc
          rm -rf node_modules/*/examples
          rm -rf node_modules/*/example
          cd ..
          
          # Show deployment size for monitoring
          echo "üìä Deployment size:"
          du -sh deployment/
          echo "üìÅ Number of files:"
          find deployment/ -type f | wc -l

      - name: üöÄ Deploy to server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          server: ${{ secrets.DEPLOY_SERVER }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          password: ${{ secrets.DEPLOY_PASSWORD }}
          local_path: './deployment'
          remote_path: ${{ secrets.DEPLOY_REMOTE_PATH }}
          sftp_only: true
          sftpArgs: '-o ConnectTimeout=5 -o Compression=yes'
          exclude: |
            **/.env
            **/.git*
            **/node_modules/.cache/**
            **/node_modules/*/test/**
            **/node_modules/*/tests/**
            **/node_modules/*/docs/**
            **/node_modules/*/doc/**
            **/node_modules/*/examples/**
            **/node_modules/*/example/**
            **/coverage/**
            **/tests/**
            **/*.md
            **/*.txt
            **/*.log

      - name: üîÑ Restart application
        run: |
          echo "Deployment completed successfully!"
          echo "Please restart your Node.js application on the server"
          echo "Consider using PM2 or similar process manager for production"
